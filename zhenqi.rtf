{\rtf1\ansi\ansicpg936\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!DOCTYPE html>\
<html lang="zh">\
<head>\
  <meta charset="UTF-8">\
  <title>
\f1 \'d3\'ce\'cf\'b7\'ca\'a4\'c2\'ca\'c4\'a3\'c4\'e2\'c6\'f7
\f0 </title>\
  <style>\
    body \{\
      font-family: sans-serif;\
      padding: 20px;\
      background: #f4f4f4;\
    \}\
    label, select, input \{\
      display: block;\
      margin-bottom: 10px;\
    \}\
    button \{\
      margin-top: 10px;\
      padding: 5px 10px;\
    \}\
    #output \{\
      margin-top: 20px;\
      padding: 10px;\
      background: #fff;\
      border: 1px solid #ccc;\
    \}\
  </style>\
</head>\
<body>\
  <h2>
\f1 \'d3\'ce\'cf\'b7\'ca\'a4\'c2\'ca\'c4\'a3\'c4\'e2\'c6\'f7
\f0 </h2>\
\
  <label>
\f1 \'bb\'f9\'b4\'a1\'ca\'a4\'c2\'ca
\f0  p (
\f1 \'c0\'fd\'c8\'e7
\f0  0.4)\
    <input type="number" id="p" min="0" max="1" step="0.01" value="0.4">\
  </label>\
\
  <label>
\f1 \'c3\'bf\'bc\'b6\'cc\'e1\'c9\'fd
\f0  d (
\f1 \'c0\'fd\'c8\'e7
\f0  0.05)\
    <input type="number" id="d" min="0" max="1" step="0.01" value="0.05">\
  </label>\
\
  <label>
\f1 \'c6\'f0\'ca\'bc\'b5\'c8\'bc\'b6
\f0 \
    <select id="startLevel">\
      <option value="D">D</option>\
      <option value="C">C</option>\
      <option value="B">B</option>\
      <option value="A" selected>A</option>\
      <option value="S">S</option>\
    </select>\
  </label>\
\
  <label>
\f1 \'ca\'c7\'b7\'f1\'c6\'f4\'d3\'c3\'c7\'e9\'d0\'f7\'b5\'f7\'d5\'fb
\f0 \
    <select id="moodToggle">\
      <option value="no">
\f1 \'b7\'f1
\f0 </option>\
      <option value="yes" selected>
\f1 \'ca\'c7
\f0 </option>\
    </select>\
  </label>\
\
  <label>
\f1 \'c7\'e9\'d0\'f7\'b5\'f7\'d5\'fb\'c7\'bf\'b6\'c8\'b7\'d6\'c4\'b8
\f0  (
\f1 \'c4\'ac\'c8\'cf\'ce\'aa
\f0  100
\f1 \'a3\'ac\'d4\'bd\'d0\'a1\'d3\'b0\'cf\'ec\'d4\'bd\'b4\'f3
\f0 )\
    <input type="number" id="moodFactor" min="1" step="1" value="100">\
  </label>\
\
  <button onclick="simulate()">
\f1 \'d4\'cb\'d0\'d0\'c4\'a3\'c4\'e2
\f0 </button>\
\
  <div id="output"></div>\
\
  <script>\
    function simulate() \{\
      const p = parseFloat(document.getElementById('p').value);\
      const d = parseFloat(document.getElementById('d').value);\
      const startLevel = document.getElementById('startLevel').value;\
      const moodOn = document.getElementById('moodToggle').value === 'yes';\
      const moodDiv = parseFloat(document.getElementById('moodFactor').value);\
\
      const levels = ['D', 'C', 'B', 'A', 'S'];\
      const kValues = \{ D: 1.0, C: 1.1, B: 1.3, A: 1.5, S: 2.0 \};\
      let level = startLevel;\
\
      let history = [];\
      let scoresByLevel = \{ D: 0, C: 0, B: 0, A: 0, S: 0 \};\
      let currentLevelStart = 0;\
      let winStreak = 0;\
\
      function getWinRate(level, moodAdj) \{\
        const base = p + (4 - levels.indexOf(level)) * d;\
        const raw = base + (moodAdj || 0);\
        return Math.max(0, Math.min(1, raw));\
      \}\
\
      const nGames = 1000;\
      for (let i = 0; i < nGames; i++) \{\
        let mood = 0;\
        if (moodOn && i >= 10) \{\
          const recentWins = history.slice(i - 10, i).filter(x => x === 'W').length;\
          mood = (recentWins - 5) / moodDiv;\
        \}\
\
        const winRate = getWinRate(level, mood);\
        const win = Math.random() < winRate;\
        history.push(win ? 'W' : 'L');\
\
        // scoring\
        winStreak = win ? winStreak + 1 : 0;\
        const I = win ? 100 : 0;\
        let c = 0;\
        if (winStreak >= 2 && winStreak <= 5) c = 30;\
        else if (winStreak <= 10) c = 60;\
        else if (winStreak > 10) c = 100;\
\
        const k = kValues[level];\
        const score = (I + c + 15) * k;\
        scoresByLevel[level] += score;\
\
        // promotion/degradation\
        const recent = history.slice(currentLevelStart);\
        let promote = false, degrade = false;\
\
        if (level === 'D' && recent.length >= 10) promote = recent.filter(x => x === 'W').length >= 6;\
        if (level === 'C' && recent.length >= 15) \{\
          promote = recent.filter(x => x === 'W').length >= 9;\
          degrade = recent.filter(x => x === 'L').length >= 14;\
        \}\
        if (level === 'B' && recent.length >= 20) \{\
          promote = recent.filter(x => x === 'W').length >= 12;\
          degrade = recent.filter(x => x === 'L').length >= 13;\
        \}\
        if (level === 'A' && recent.length >= 20) \{\
          promote = recent.filter(x => x === 'W').length >= 13;\
          degrade = recent.filter(x => x === 'L').length >= 12;\
        \}\
        if (level === 'S' && recent.length >= 20) degrade = recent.filter(x => x === 'L').length >= 11;\
\
        if (promote && level !== 'S') \{\
          level = levels[levels.indexOf(level) + 1];\
          currentLevelStart = i + 1;\
          winStreak = 0;\
        \} else if (degrade && level !== 'D') \{\
          level = levels[levels.indexOf(level) - 1];\
          currentLevelStart = i + 1;\
          winStreak = 0;\
        \}\
      \}\
\
      // calculate and display result\
      const total = Object.values(scoresByLevel).reduce((a, b) => a + b, 0);\
      const resultText = levels.reverse().map(lvl => \{\
        const pct = ((scoresByLevel[lvl] / total) * 100).toFixed(2);\
        return `
\f1 \'b5\'c8\'bc\'b6
\f0  $\{lvl\}: $\{pct\}%`;\
      \}).join('<br>');\
\
      document.getElementById('output').innerHTML = `<h3>
\f1 \'bd\'e1\'b9\'fb\'a3\'ba
\f0 </h3>$\{resultText\}`;\
    \}\
  </script>\
</body>\
</html>}